// <auto-generated />
using System;
using FoodForRequest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodForRequest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230509204037_inglist")]
    partial class inglist
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FoodForRequest.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = "e56b98e0-eafe-4e03-9ec0-5508e00df37f",
                            ContractorId = "b1aa533d-819e-4a79-b4e7-81511ce9b9f8",
                            ProductId = "3",
                            Text = "Hi"
                        },
                        new
                        {
                            Id = "1671e955-95c9-4964-ad03-302c1aea7d70",
                            ContractorId = "b1aa533d-819e-4a79-b4e7-81511ce9b9f8",
                            ProductId = "4",
                            Text = "Hello"
                        });
                });

            modelBuilder.Entity("FoodForRequest.Models.FoodRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RequestorId");

                    b.ToTable("Foodrequests");

                    b.HasData(
                        new
                        {
                            Id = "a0279304-2557-46fa-9bb5-124c064c9416",
                            Description = "Nyers hal",
                            IsDone = false,
                            Name = "Susi",
                            PictureContentType = "Image/jpeg",
                            RequestorId = "fb1089fa-5f1c-4d7f-b446-4c195228c8e9"
                        },
                        new
                        {
                            Id = "6f9ff26b-ac8f-46ce-b54f-8f2eaf82d246",
                            Description = "Sülthus",
                            IsDone = false,
                            Name = "Stake",
                            PictureContentType = "Image/jpeg",
                            RequestorId = "fb1089fa-5f1c-4d7f-b446-4c195228c8e9"
                        },
                        new
                        {
                            Id = "3",
                            Description = "Tosted.",
                            IsDone = false,
                            Name = "Toast",
                            PictureContentType = "Image/jpeg",
                            RequestorId = "fcbc723f-7462-4d63-902e-2c002724715b"
                        },
                        new
                        {
                            Id = "4",
                            Description = "All the chocklate",
                            IsDone = false,
                            Name = "Chocklate ckae",
                            PictureContentType = "Image/png",
                            RequestorId = "fcbc723f-7462-4d63-902e-2c002724715b"
                        },
                        new
                        {
                            Id = "5",
                            Description = "I want to see myself eating",
                            IsDone = false,
                            Name = "Mirror ckae",
                            PictureContentType = "Image/jpeg",
                            RequestorId = "fcbc723f-7462-4d63-902e-2c002724715b"
                        });
                });

            modelBuilder.Entity("FoodForRequest.Models.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = "3a234586-2888-4985-9e15-4fb65da028ee",
                            Description = "Tuna",
                            Name = "Hal",
                            ProductId = "a0279304-2557-46fa-9bb5-124c064c9416"
                        },
                        new
                        {
                            Id = "acd48164-e9f8-469b-a03a-9e9aff65ddc2",
                            Description = "Rizs",
                            Name = "Rizs",
                            ProductId = "a0279304-2557-46fa-9bb5-124c064c9416"
                        },
                        new
                        {
                            Id = "65e45de0-fa7f-497e-b3c4-f12046f91f01",
                            Description = "Dark",
                            Name = "Choko",
                            ProductId = "4"
                        });
                });

            modelBuilder.Entity("FoodForRequest.Models.Offer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Choosen")
                        .HasColumnType("bit");

                    b.Property<string>("ContractorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = "64cae77c-6352-4503-a8c6-0407f1739d2e",
                            Choosen = false,
                            ContractorId = "fb1089fa-5f1c-4d7f-b446-4c195228c8e9",
                            ProductId = "3"
                        },
                        new
                        {
                            Id = "37448b45-d89d-4d8d-a8f7-fbbf96ce2694",
                            Choosen = false,
                            ContractorId = "b1aa533d-819e-4a79-b4e7-81511ce9b9f8",
                            ProductId = "3"
                        },
                        new
                        {
                            Id = "f3cf1a5a-5850-4a64-990c-8e1db6e12d61",
                            Choosen = false,
                            ContractorId = "b1aa533d-819e-4a79-b4e7-81511ce9b9f8",
                            ProductId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodForRequest.Models.FoodUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("FoodUser");

                    b.HasData(
                        new
                        {
                            Id = "fb1089fa-5f1c-4d7f-b446-4c195228c8e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "339a1422-c3a3-49f5-a4db-6ff70d2a5dd0",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "KISBELA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGokW+/UbD+JRZMAfHKL24ZkiY64N9291Y3g1mT7roC/Y4UO3vAH98OM4Ro1VTtrMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "576a51ec-1bc2-44cd-af25-2e4f22e094a3",
                            TwoFactorEnabled = false,
                            UserName = "kisbela@gmail.com",
                            FirstName = "Béla",
                            FoodUserName = "kisbela@gmail.com",
                            LastName = "Kiss"
                        },
                        new
                        {
                            Id = "fcbc723f-7462-4d63-902e-2c002724715b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64194c17-7849-4deb-a5d0-b488c78b055f",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOZSEFJOZSIKA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF94liyfAq2axniy+fOCRNtY8j4PBLj+AfQ/9KCCNTiZWB0yX8DzBya1kX6wzUQu8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9819dcc3-bb6d-4113-80d4-684cb5b37385",
                            TwoFactorEnabled = false,
                            UserName = "jozsefjozsika@gmail.com",
                            FirstName = "József",
                            FoodUserName = "jozsefjozsika@gmail.com",
                            LastName = "Kelemen"
                        },
                        new
                        {
                            Id = "b1aa533d-819e-4a79-b4e7-81511ce9b9f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cb97213-a2bc-440e-836c-b859417b8049",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "FERKOBERKO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOse9PpnfGYpr3dU8zmlAp+Q4CuuU1o2KP9TRsrv+XDUGFyDWSQFrhz71T+Q4miXkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c2ce722-3b39-4c0b-ad63-91446ad8eac6",
                            TwoFactorEnabled = false,
                            UserName = "ferkoberko@gmail.com",
                            FirstName = "Ferenc",
                            FoodUserName = "ferkoberko@gmail.com",
                            LastName = "Kovács"
                        });
                });

            modelBuilder.Entity("FoodForRequest.Models.Comment", b =>
                {
                    b.HasOne("FoodForRequest.Models.FoodUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodForRequest.Models.FoodRequest", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodForRequest.Models.FoodRequest", b =>
                {
                    b.HasOne("FoodForRequest.Models.FoodUser", "Requestor")
                        .WithMany("FoodRequests")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("FoodForRequest.Models.Ingredient", b =>
                {
                    b.HasOne("FoodForRequest.Models.FoodRequest", "Product")
                        .WithMany("Ingridients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodForRequest.Models.Offer", b =>
                {
                    b.HasOne("FoodForRequest.Models.FoodUser", "User")
                        .WithMany("Offers")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodForRequest.Models.FoodRequest", "Product")
                        .WithMany("Offers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodForRequest.Models.FoodRequest", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ingridients");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("FoodForRequest.Models.FoodUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FoodRequests");

                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
